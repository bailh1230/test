<?xml version="1.0" encoding="UTF-8"?>
	<!--
	scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
	scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。
	debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
	-->
<configuration scan="false" scanPeriod="60 seconds" debug="false">

    <!-- 定义日志的根目录 -->
    <springProperty scope="context" name="LOG_ROOT_PATH" source="logback.logdir"/>
     
    <!-- 定义日志文件名称 -->
    <springProperty scope="context" name="statementName" source="logback.sqlname"/>
    <springProperty scope="context" name="errorName"     source="logback.errorname"/>
    
    <!--输出到控制台 ConsoleAppender-->
    <appender name="consoleLog" class="ch.qos.logback.core.ConsoleAppender">
        <!--展示格式 layout-->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>
                <pattern>%d [%thread] %-5level %logger{36} %line - %msg%n</pattern>
            </pattern>
        </layout>
    </appender>
    
   <!-- 向文件输出sql语句 -->
   <appender name="fileSqlLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
     
    
    <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
              如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
              的日志改名为今天的日期。即，<File> 的日志都是当天的。
    -->
    <File>${LOG_ROOT_PATH}/${statementName}.log</File>
    <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
        <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
        <FileNamePattern>${LOG_ROOT_PATH}/${statementName}.%d{yyyy-MM-dd}.log</FileNamePattern>
        <!--只保留最近60天的日志-->
        <maxHistory>60</maxHistory>
        <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
        <!--<totalSizeCap>1GB</totalSizeCap>-->
    </rollingPolicy>
    <!--日志输出编码格式化-->
    <encoder>
        <charset>UTF-8</charset>
        <pattern>%d [%thread] %-5level %logger{36} %line - %msg%n</pattern>
    </encoder>
  </appender>


   <!-- 向文件输出异常信息-->
  <appender name="fileErrorLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
	    <!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter-->
	    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
	        <level>ERROR</level>
	    </filter>
	    
	    <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
	         如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
	         的日志改名为今天的日期。即，<File> 的日志都是当天的。
	    -->
	    <File>${LOG_ROOT_PATH}/${errorName}.log</File>
	    
	    <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
	    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
	        <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
	        <FileNamePattern>${LOG_ROOT_PATH}/${errorName}.%d{yyyy-MM-dd}.log</FileNamePattern>
	        <!--只保留最近60天的日志-->
	        <maxHistory>60</maxHistory>
	        <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
	        <!--<totalSizeCap>1GB</totalSizeCap>-->
	    </rollingPolicy>
	    <!--日志输出编码格式化-->
	    <encoder>
	        <charset>UTF-8</charset>
	        <pattern>%d [%thread] %-5level %logger{36} %line - %msg%n</pattern>
	    </encoder>
	</appender>  

    <!-- 
		logger主要用于存放日志对象，也可以定义日志类型、级别
		name：表示匹配的logger类型前缀，也就是包的前半部分
		level：要记录的日志级别，包括 TRACE < DEBUG < INFO < WARN < ERROR
		additivity：作用在于children-logger是否使用 rootLogger配置的appender进行输出，
		false：表示只用当前logger的appender-ref，
		true：表示当前logger的appender-ref和rootLogger的appender-ref都有效
    -->
    <!-- 配置sql的输出 -->
    <logger name="org.hibernate.SQL" level="DEBUG"  additivity="false">
        <appender-ref ref="fileSqlLog" />    
    </logger>
    <logger name="org.hibernate.type.descriptor.sql.BasicBinder" additivity="false" level="TRACE" >
        <appender-ref ref="fileSqlLog" />
    </logger>
    <logger name="org.springframework" level="debug" additivity="false"/>



    <!-- 
    root与logger是父子关系，没有特别定义则默认为root，任何一个类只会和一个logger对应，
           要么是定义的logger，要么是root，判断的关键在于找到这个logger，然后判断这个logger的appender和level。 
    -->
    <root level="DEBUG">
         <appender-ref ref="consoleLog" />
         <appender-ref ref="fileErrorLog"/>
    </root>

</configuration> 